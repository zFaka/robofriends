{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Header","nextProps","nextState","Component","ErrorBoundry","state","hasError","error","info","this","setState","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b828114a.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?set=set5`} alt=\"logo\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map(\n                    (user,  i) => {\n                        return (\n                            <Card\n                                key   = {i} \n                                id    = {robots[i].id}  \n                                name  = {robots[i].name} \n                                email = {robots[i].email}\n                            /> \n                        );\n                    }\n                )\n            }\n        </div>\n    );\n}\n\nexport default CardList;\n","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({searchfield, searchChange}) => { \n    return(\n        <div className='pa2'>\n            <input\n                aria-label=\"Search Mates\"\n                className='pa2 ba b--blue bg-lightest-blue'\n                type=\"search\" \n                placeholder='Find your mate' \n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{\n            overflowY:'scroll', border: '1px solid blue', height:'600px'\n            }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n","import React,  {Component} from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        return <h1 className='f1'>PcbMates</h1>\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError:false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if (this.state.hasError) {\n            return <h1>Uy thats not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {setSearchField, requestRobots} from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField, \n        robots: state.requestRobots.robots, \n        isPending: state.requestRobots.isPending, \n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange:(event) => dispatch(setSearchField(event.target.value)), \n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component{ \n    constructor(){\n        super()\n        this.state = {\n            robots:[], \n            searchfield:''\n        }\n    }\n\n\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const filterRobots = robots.filter(\n            robot => {\n                return robot.name.toLowerCase().includes(\n                    searchField.toLowerCase()\n                )\n            });\n        return isPending ?\n            <h1 className='tc'>Loading</h1> :\n            (\n                <div className='tc'>\n                    <Header/>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filterRobots}/>\n                        </ErrorBoundry>\n\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type:CHANGE_SEARCH_FIELD, \n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\n        .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField:''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false, \n    robots:[], \n    error:''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {\n                isPending: true\n            })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {\n                robots: action.payload, \n                isPending:false\n            })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {\n                error:action.payload, \n                isPending: false\n            })\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport thunkMiddleware from 'redux-thunk';\n\nimport {Provider} from 'react-redux';\nimport {createStore,  applyMiddleware, combineReducers} from 'redux';\nimport {searchRobots, requestRobots} from './reducers';\nimport {createLogger} from 'redux-logger';\n\nimport 'tachyons';\nimport './index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store= createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}